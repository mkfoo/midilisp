(define trk 0)
(define chn 0)
(define vel 96)
(define oct 5)
(define dur 4)
(define art 4)

(define delta
    (lambda (dur)
        (if (= dur 0)
            0
            (/ (* div 4) dur))))

(define rest
    (lambda (dur)
        (adv-clock trk (delta dur))))

(define on
    (lambda (num del vel)
        (put-event trk del
            (note-on chn num vel))))

(define off
    (lambda (num del vel)
        (put-event trk del
            (note-off chn num vel))))

(define note
    (lambda (num dur art vel)
        (on num 0 vel)
        (on num (delta art) 0)
        (adv-clock trk (delta dur))))

(define cc7
    (lambda (id val)
        (put-event trk 0
            (control-change chn id val))))

(define cc14
    (lambda (id val)
        (put-event trk 0
            (control-change chn (+ id 32) (& val 0x7f)))
        (put-event trk 0
            (control-change chn id (>> (& val 0x3fff) 7)))))

(define program
    (lambda (p)
        (define prog
            (if (<= p 0)
                0
                (- p 1)))
        (put-event trk 0
            (program-change chn prog))))

(define tempo
    (lambda (tmp)
        (put-event trk 0
            (set-tempo (/ 60000000 tmp)))))

(define time
    (lambda (nn dd cc bb)
        (put-event trk 0
            (time-signature nn dd cc bb))))

(define for-each
    (lambda (list func)
        (func (car list))
        (if (= (cdr list) ())
            ()
            (for-each (cdr list) func))))

(define for-range
    (lambda (start end list func)
        (assert (< start end))
        (define loop
            (lambda (idx list)
                (if (>= idx start)
                    (func (car list)))
                (if (>= idx (- end 1))
                    ()
                    (loop (+ idx 1) (cdr list)))))
        (loop 0 list)))
